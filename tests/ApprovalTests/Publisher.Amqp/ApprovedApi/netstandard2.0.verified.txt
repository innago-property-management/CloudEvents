[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/innago-property-management/CloudEvents")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("DynamicProxyGenAssembly2")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("UnitTests")]
namespace Innago.Platform.Messaging.Publisher.Amqp
{
    public class AmqpConfiguration
    {
        public AmqpConfiguration() { }
        public Innago.Platform.Messaging.Publisher.Amqp.AmqpConfiguration.AddressInfo Address { get; set; }
        public string? ExchangeName { get; set; }
        public string? SenderName { get; set; }
        public struct AddressInfo : System.IEquatable<Innago.Platform.Messaging.Publisher.Amqp.AmqpConfiguration.AddressInfo>
        {
            public AddressInfo(string Host, int Port, string? User = null, string? Password = null, string Path = "/", string Scheme = "AMQPS") { }
            public string Host { get; set; }
            public string? Password { get; set; }
            public string Path { get; set; }
            public int Port { get; set; }
            public string Scheme { get; set; }
            public string? User { get; set; }
            public Amqp.Address ToAddress() { }
        }
    }
    public static class DependencyInjection
    {
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddAmqpCloudEventsPublisher(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfiguration configuration, string? sectionName = "publisherAmqp") { }
    }
    public sealed class Publisher : Innago.Platform.Messaging.Publisher.IPublisher, System.IAsyncDisposable
    {
        public Publisher(Amqp.IConnection connection, Microsoft.Extensions.Logging.ILogger<Innago.Platform.Messaging.Publisher.Amqp.Publisher> logger, string address, string senderName) { }
        public System.Threading.Tasks.ValueTask DisposeAsync() { }
        public System.Threading.Tasks.Task PublishAsync<T>(CloudNative.CloudEvents.CloudEvent cloudEvent, System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver typeInfoResolver) { }
        public System.Threading.Tasks.Task PublishAsync<T>(Innago.Platform.Messaging.EntityEvents.IEntityEventInfo<T> entityEventInfo, System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver typeInfoResolver) { }
    }
    public static class PublisherTracer
    {
        public static readonly System.Diagnostics.ActivitySource Source;
    }
}